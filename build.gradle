apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'project-report' // gradle-1.9 feature
apply plugin: 'jacoco'         // gradle-1.9 incubating
apply plugin: 'org.asciidoctor.gradle.asciidoctor'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'artifactory'
apply plugin: 'info-broker'
apply plugin: 'info-jar'
apply plugin: 'info-basic'
apply plugin: 'info-java'


/********************************/
/**** Profile configuration ****/

/** Profile loading boilerplate */
def applyProfile(aProfile) {
    def profilesDir = relativePath('build-profiles')

    println 'Loading profile: ' + aProfile + '.gradle'
    apply from: profilesDir + '/' + aProfile + '.gradle'
}

/** usage: gradle build -Pprofile=omero500-ice34 */
ext.profile = hasProperty("profile") ? profile : 'omero508-ice34' // default profile: omero-5.0.8 + ice-3.4.2
applyProfile(profile)


/********************************/
/**** Project configuration ****/

group       = 'org.imagopole.omero'
version     = '0.2.1-SNAPSHOT'
description = """OMERO server extension for PPMS auth"""


/********************************/
/**** Custom properties     ****/

ext.buildConfig = [
    generatedTestResourcesDir : "$buildDir/generated-resources/test"
]

sourceSets {
    bench

    test {
        // register an output folder on the test SourceSet for inclusion on the classpath
        output.dir(buildConfig.generatedTestResourcesDir, builtBy: 'generateTestResources')
    }
}

ext.sharedManifest = manifest {
    attributes 'X-Build-Profile': profile,
               'X-Omero-Version': profileVersions.omero,
               'X-Omero-Ice-Version': profileVersions.ice
}

/** Omero server flavor classifier for distribution packages (no ice dependency) */
ext.omeClassifier = omeVersions.qualifier

ext.versions = [
    ppmsClient   : '0.4',           //--OMERO: n/a
    slf4j        : '1.7.6',         //--OMERO: 1.7.6
    logback      : '1.1.1',         //--OMERO: 1.1.1
    testng       : '6.8',           //--OMERO: n/p (5.14.10)
    unitils      : '3.3',           //--OMERO: n/a
    postgresJdbc : '9.3-1102-jdbc4', //--OMERO: 9.1-901.jdbc3
    httpClient   : '4.3.2',         //--OMERO: n/a
    csveed       : '0.3.2',         //--OMERO: n/a
    contiperf    : '2.3.2',         //--OMERO: n/a
    flyway       : '2.3.1',         //--OMERO: n/a
    ldapSdk      : '2.3.6',         //--OMERO: n/a (apache-ds)
]

ext.integrationTests = [
    db : [
        name           : omeVersions.qualifier,    //eg. ome508
        owner          : omeVersions.qualifier,
        pwd            : omeVersions.qualifier,
    ],
    resources : [
        omeroServerDataDir        : sprintf("$buildDir/%s.data", profile),
        omeroServerConfigLocation : "$sourceSets.test.output.resourcesDir/omero-local.properties"
    ]
]

ext.benchTests = [
    resources : [
        benchConfigLocation : "$sourceSets.bench.output.resourcesDir/omero-local.bench.properties"
    ]
]

ext.testResourcesFilterTokens = [
    'omero_db_name'   : integrationTests.db.name,
    'omero_db_user'   : integrationTests.db.owner,
    'omero_db_pass'   : integrationTests.db.pwd,
    'omero_data_dir'  : integrationTests.resources.omeroServerDataDir
]


/*********************************/
/**** Builfile configuration ****/

sourceCompatibility = 1.6
targetCompatibility = 1.6

jar {
    manifest = sharedManifest
}

repositories {
    mavenLocal()
    mavenCentral()

    maven {
        name 'Artifactory OME repo'
        url  'http://artifacts.openmicroscopy.org/artifactory/repo'
    }

    // mirror for artifacts not published in a central repo (eg. OMERO language bindings
    // and other dependencies not published in OME Artifactory)
    maven {
        name 'Bintray Imagopole repo'
        url  'http://dl.bintray.com/imagopole/maven'
    }

    maven {
        name 'Maven Databene repo'
        url  'http://databene.org/m2'
    }
}

/**
 * Reminder: all dependencies must remain in line with OMERO's runtime classpath
 **/
dependencies {

    compile 'org.slf4j:slf4j-api:' + versions.slf4j
    compile 'org.imagopole.ppms:ppms-http-client:' + versions.ppmsClient

    // pumapiClient transitive dependencies
    runtime 'org.apache.httpcomponents:fluent-hc:' + versions.httpClient
    runtime 'org.csveed:csveed:' + versions.csveed

    // logback slf4j binding
    runtime 'ch.qos.logback:logback-classic:' + versions.logback
    // slf4j bound to logback-classic + redirection of ACL to slf4j (ie. slf4j replaces commons-logging - see http://www.slf4j.org/legacy.html)
    runtime 'org.slf4j:jcl-over-slf4j:' + versions.slf4j

    testCompile 'org.testng:testng:' + versions.testng
    testCompile 'org.unitils:unitils-core:' + versions.unitils
    testCompile(group: 'org.unitils', name: 'unitils-testng', version: versions.unitils) {
        transitive = false
    }
    testCompile 'org.unitils:unitils-inject:' + versions.unitils
    testCompile 'org.unitils:unitils-mock:' + versions.unitils
    testCompile 'com.googlecode.flyway:flyway-core:' + versions.flyway
    testCompile 'com.unboundid:unboundid-ldapsdk:' + versions.ldapSdk

    testRuntime(group: 'org.unitils', name: 'unitils-dbunit', version: versions.unitils) {
        exclude group: 'org.unitils', module: 'unitils-database'
        exclude group: 'org.springframework'
        exclude group: 'org.slf4j'
        exclude group: 'ch.qos.logback'
    }
    testRuntime 'org.postgresql:postgresql:' + versions.postgresJdbc

    benchCompile 'org.databene:contiperf:' + versions.contiperf
    benchCompile 'org.springframework:spring-test:' + profileVersions.spring.core
    benchCompile sourceSets.main.output
    benchCompile configurations.testCompile
    benchRuntime configurations.testRuntime
}

eclipse {
    classpath {
        plusConfigurations += [ configurations.benchCompile ]
    }
}

/** Note: integration tests will wipe out and reload the test database at setup time. */
test {
    useTestNG()

    // set arguments for the test JVM(s)
    jvmArgs "-XX:MaxPermSize=256m"

    //testLogging.showStandardStreams = true

    // for integration tests only
    // either one or the other:
    // - OMERO_CONFIG has priority eg. OMERO_CONFIG=~/omero-local.properties ./gradlew test
    // - if not set, then fallback on a default 'omero.config.location' in $buildDir
    systemProperty 'omero.config.location', integrationTests.resources.omeroServerConfigLocation
}

processTestResources {
    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens : testResourcesFilterTokens)
}

/********************************/
/**** Plugins configuration ****/

findbugs {
    sourceSets     = [sourceSets.main]
    effort         = 'max'
    reportLevel    = 'high'
    ignoreFailures = true
}

findbugsMain {
    reports {
      xml.enabled  = false
      html.enabled = true
    }
}

pmd {
    sourceSets     = [sourceSets.main]
    ignoreFailures = true
    ruleSetFiles   = files("config/pmd/pmd.xml")
}

checkstyle {
    sourceSets     = [sourceSets.main]
    ignoreFailures = true
    showViolations = false
}

/** Generate the checkstyle html report */
task checkstyleHtmlReport(dependsOn: checkstyleMain) {
   if (file("$reporting.baseDir/checkstyle/main.xml").exists()) {

       ant.xslt(
            in:    "$reporting.baseDir/checkstyle/main.xml",
            style: "$projectDir/config/checkstyle/checkstyle-noframes-severity-sorted.xsl",
            out:   "$reporting.baseDir/checkstyle/main.html"
       )

   }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }

    // workaround for source code highlighting in coverage report
    // see http://www.eclemma.org/jacoco/trunk/doc/faq.html
    //     http://forums.gradle.org/gradle/topics/_1_6_rc_1_jacoco_plugin_does_not_show_line_numbers
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
}

asciidoctor {
    sourceDir  = file("$projectDir/src/asciidoc")
    backends   = [ "html5", "pdf" ]
    attributes = [
                  'pagenums': '' // generate page numbers for PDF backend - see asciidoctor-pdf#41
                 ]
    separateOutputDirs = true
}

/**
 * Note: OMERO.server expects the extensions to be packaged in a single jar named 'extensions.jar'
 * (no classpath drop-in), so this uber-jar will have to be renamed accordingly for deployment.
 *
 * See:
 *   - http://www.openmicroscopy.org/site/support/omero5/developers/Server/ExtendingOmero.html#java-deployment
 *   - https://github.com/openmicroscopy/openmicroscopy/blob/v.5.0.0/components/antlib/resources/lifecycle.xml#L371
 **/
shadowJar {
    classifier "server-extension"
    manifest = sharedManifest

    exclude 'META-INF/*.txt'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/DEPENDENCIES'

    // aggregate the subset of dependencies not already present on the OMERO.server classpath
    dependencies {
        include dependency('org.imagopole.ppms:ppms-http-client')

        //-- runtime ppms-http-client dependencies
        include dependency('org.apache.httpcomponents:fluent-hc')
        include dependency('org.apache.httpcomponents:httpclient')
        include dependency('org.apache.httpcomponents:httpcore')
        include dependency('org.csveed:csveed')
    }
}

bintray {
    user    = project.hasProperty('bintray_user')    ? bintray_user                : null
    key     = project.hasProperty('bintray_key')     ? bintray_key                 : null
    dryRun  = project.hasProperty('bintray_dryRun')  ? bintray_dryRun.toBoolean()  : true
    publish = project.hasProperty('bintray_publish') ? bintray_publish.toBoolean() : false

    filesSpec {
        from    "$distsDir"
        into    bintray_targetPath
        include project.hasProperty('bintray_includeSpec') ? bintray_includeSpec : []
    }

    pkg {
        repo      = project.bintray_repo
        userOrg   = project.hasProperty('bintray_org') ? bintray_org : null
        name      = project.bintray_pkg
        desc      = project.description
        vcsUrl    = project.bintray_vcsUrl
        licenses  = [ 'GPL-2.0' ]

        version.mavenCentralSync.sync = false
    }
}


/*********************************************/
/**** Custom tasks/project configuration ****/

task generateTestResources {

    /* A poor man's integration testing man page/script which outputs a bunch of commands for manual execution
     * Ideally should be runnable in one fell gradle swoop, with sudo command prompt, etc... */
    def generateIntegrationTestInfo = {
        def generatedTestInfo = new File(buildConfig.generatedTestResourcesDir, "integration-tests.sh")

        def sb = new StringBuilder("#!/bin/bash")
        sb.append("\n##############################################################################\n")
        sb.append(sprintf("/bin/bash $projectDir/src/test/resources/db/setup-db.sh %s %s %s \n",
                          integrationTests.db.name, integrationTests.db.owner, integrationTests.db.pwd))
        sb.append("mkdir -p ").append(integrationTests.resources.omeroServerDataDir).append("\n")
        sb.append("./gradlew test -Pprofile=").append(profile).append("\n")
        sb.append(sprintf("/bin/bash $projectDir/src/test/resources/db/teardown-db.sh %s %s \n",
                          integrationTests.db.name, integrationTests.db.owner))
        sb.append("###############################################################################\n")

        generatedTestInfo.text = sb.toString()
        logger.info(generatedTestInfo.text)   // enable logging to console for copy/paste
    }

    doLast {
        new File(buildConfig.generatedTestResourcesDir).mkdirs()

        generateIntegrationTestInfo()
    }
}

/** Create a distribution bundle with runtime dependencies + OMERO server extension uber-jar */
task withDepsDistZip (type: Zip) { zipTask ->

    dependsOn asciidoctor, shadowJar

    classifier = omeClassifier + '-with-dependencies'

    into ("lib") {
        from configurations.runtime
    }
    into ("docs") {
        from "$buildDir/asciidoc"
    }
    from configurations.runtime.allArtifacts.files
    from fileTree("$distsDir").include("*.jar")
    from fileTree("$projectDir").include(["*.md", "LICENSE.txt"])
}

/** Create a distribution bundle with the OMERO server extension uber-jar only */
task serverExtDistZip(type: Zip) { zipTask ->

    dependsOn asciidoctor, shadowJar

    classifier = omeClassifier + '-server-extension'

    into ("docs") {
        from "$buildDir/asciidoc"
    }
    from fileTree("$libsDir").include("*-server-extension.jar")
    from fileTree("$projectDir").include(["*.md", "LICENSE.txt"])
}

/** Create all distribution bundles */
task distributionZip {
    dependsOn serverExtDistZip, withDepsDistZip
}

artifacts {
    archives file(withDepsDistZip.archivePath)
    archives file(serverExtDistZip.archivePath)
}

task benchTest(type: Test) {
    useJUnit()

    //testLogging.showStandardStreams = true

    // workaround to make sure that ContiPerf reports get generated in the build directory
    workingDir     = project.buildDir

    testClassesDir = sourceSets.bench.output.classesDir
    classpath      = sourceSets.bench.runtimeClasspath

    // for bench integration tests only
    // either one or the other:
    // - BENCH_CONFIG has priority eg. BENCH_CONFIG=~/omero-local.bench.properties ./gradlew benchTest
    // - if not set, then fallback on a default 'bench.config.location' in $buildDir
    systemProperty 'bench.config.location', benchTests.resources.benchConfigLocation
}

/**************************************/
/**** Build plugins configuration ****/

buildscript {
    ext.pluginsVersions = [
        asciidoctor      : '1.5.2',
        asciidoctorjPdf  : '1.5.0-alpha.6',
        shadow           : '1.2.0',
        artifactory      : '2.2.5',
        bintray          : '1.1',
        info             : '2.2.0',
    ]

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:' + pluginsVersions.asciidoctor
        classpath 'org.asciidoctor:asciidoctorj-pdf:' + pluginsVersions.asciidoctorjPdf
        classpath 'com.github.jengelman.gradle.plugins:shadow:' + pluginsVersions.shadow
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:' + pluginsVersions.artifactory
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:' + pluginsVersions.bintray
        classpath 'com.netflix.nebula:gradle-info-plugin:' + pluginsVersions.info
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}
